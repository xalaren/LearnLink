methods: {
			onEntityInitialized: function(){
                this.callParent(arguments);
                this.getProgramIntervalActiveNumber();
                this.getMaximumDailyActiveSessions();
            },
			getProgramIntervalActiveNumber: function() {
				
				const esqInterval = this.Ext.create("Terrasoft.EntitySchemaQuery", {
					rootSchemaName: "UsrMedicalPrograms"
				});
				const groupFilters = this.Ext.create("Terrasoft.FilterGroup");
				
				const intervalName = "Ежедневно";
				const intervalFilter = this.Terrasoft.createColumnFilterWithParameter(this.Terrasoft.ComparisonType.EQUAL, 
					"UsrMedProgramInterval.Name",
					intervalName);
				
				const currentId = this.get("Id");
				const filterId = this.Terrasoft.createColumnFilterWithParameter(this.Terrasoft.ComparisonType.NOT_EQUAL,
					"Id",
					currentId
				);

				const filterActiveProgram = this.Terrasoft.createColumnFilterWithParameter(this.Terrasoft.ComparisonType.EQUAL,
					"UsrMedProgramActive",
					true
				);

				groupFilters.addItem(intervalFilter);
				groupFilters.logicalOperation = this.Terrasoft.logicalOperatorType.AND;
				groupFilters.addItem(filterActiveProgram);
				groupFilters.logicalOperation = this.Terrasoft.logicalOperatorType.AND;
				groupFilters.addItem(filterId);

				esqInterval.filters.add(groupFilters);

				esqInterval.getEntityCollection(function(result) {
					if(!result.success) {
						this.showInformationDialog("Ошибка запроса");
						return;
					}

					const lengthCollection = result.collection.collection.length;
					this.set("activeSessionsCollection", lengthCollection);
				}, this);
			},

			getMaximumDailyActiveSessions: function() {
				let maxActiveSessions;

				let assignCallback = function(value) {
					maxActiveSessions = value;
				}

				this.Terrasoft.sysSettings.querySettingsItem("UsrMaxActiveSessionsCount", assignCallback, this);

				if(!maxActiveSessions) return;

				this.set("maximumDailyActiveSessions", maxActiveSessions);
			},

			intervalValidator: function() {
				const currentInterval = this.get("UsrMedProgramInterval").displayValue;

				if(currentInterval !== "Ежедневно") {
					return { invalidMessage: "" };
				}

				const isActive = this.get("UsrMedProgramActive");
				const maxActiveSessions = this.get("maximumDailyActiveSessions");
				const currentActiveSessions = this.get("activeSessionsCollection");

				if(currentActiveSessions >= maxActiveSessions && isActive) {
					return { invalidMessage: `Допускается не более ${maxActiveSessions} активных ежедневных лечебных программ` }
				}

				return { invalidMessage: "" };
			},

			setValidationConfig: function() {
				this.callParent(arguments);
				this.addColumnValidator("UsrMedProgramInterval", this.intervalValidator);
			},
		},